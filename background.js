let originalTabId = null;

chrome.runtime.onMessage.addListener(function (request, sender, sendResponse) {
  if (request.action === "startPlaylistCreation") {
    // OAuth 2.0을 사용해 구글 인증
    chrome.identity.getAuthToken({ interactive: true }, function (token) {
      if (chrome.runtime.lastError) {
        console.error("Failed to get auth token: ", chrome.runtime.lastError);
        chrome.runtime.sendMessage({
          action: "error",
          message: chrome.runtime.lastError.message,
        });
      } else {
        // content.js가 타임라인에서 추출한 노래 목록을 사용하여 재생목록 생성
        console.log("OAuth Token: ", token);
        chrome.tabs.query(
          { active: true, currentWindow: true },
          function (tabs) {
            originalTabId = tabs[0].id; // 원래 활성화된 탭의 ID 저장
            chrome.tabs.sendMessage(tabs[0].id, {
              action: "extractSongs",
              token: token,
            });
          }
        );
      }
    });
  } else if (request.action === "createPlaylist") {
    const { token, playlistName, videoIds } = request;
    createYouTubeMusicPlaylist(token, playlistName, videoIds);
  } else if (request.action === "moveToOriginalTab" && originalTabId) {
    // 원래 활성화된 탭으로 다시 이동
    chrome.tabs.update(originalTabId, { active: true });
  }
});

// 재생목록을 생성하는 함수
async function createYouTubeMusicPlaylist(token, playlistName, videoIds) {
  fetch("https://www.googleapis.com/youtube/v3/playlists?part=snippet", {
    method: "POST",
    headers: {
      Authorization: "Bearer " + token,
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      snippet: {
        title: playlistName,
        description: "This playlist was generated by the Chrome extension.",
        privacyStatus: "public",
      },
    }),
  })
    .then((response) => {
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      return response.json();
    })
    .then(async (data) => {
      console.log("Playlist creation response:", data);
      const playlistId = data.id;

      // 각 비디오 ID를 순차적으로 추가
      for (const videoId of videoIds) {
        try {
          await addSongToPlaylist(token, playlistId, videoId);
          console.log(`Song ${videoId} added to playlist.`);
        } catch (err) {
          console.error(`Error adding song ${videoId}: `, err);
        }
      }

      // 모든 비디오 추가가 완료된 후 YouTube Music 페이지로 이동
      redirectToYouTubeMusic();
    })
    .catch((error) => {
      console.error("Error creating playlist:", error);
      chrome.runtime.sendMessage({
        action: "error",
        message: "Failed to create playlist.",
      });
    });
}

// 재생목록에 노래를 추가하는 함수
function addSongToPlaylist(token, playlistId, videoId) {
  console.log("비디오id : " + videoId);
  return fetch(
    "https://www.googleapis.com/youtube/v3/playlistItems?part=snippet",
    {
      method: "POST",
      headers: {
        Authorization: "Bearer " + token,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        snippet: {
          playlistId: playlistId,
          resourceId: {
            kind: "youtube#video",
            videoId: videoId,
          },
        },
      }),
    }
  )
    .then((response) => {
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      return response.json();
    })
    .then((data) => {
      console.log("Song added to playlist: ", data);
      return data;
    })
    .catch((error) => {
      console.error("Error adding song to playlist: ", error);
      throw error;
    });
}

// YouTube Music 페이지로 이동하는 함수
function redirectToYouTubeMusic() {
  const youtubeMusicUrl = "https://music.youtube.com/library/playlists";
  chrome.tabs.create({ url: youtubeMusicUrl });
}
